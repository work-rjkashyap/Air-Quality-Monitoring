import Head from "next/head";
import React, { useState, useMemo, useRef, useEffect } from "react";
import useWebSocket, { ReadyState } from "react-use-websocket";
import IndexWithColor from "../components/indexwithcolor";
import Card from "../components/Card";

export default function Home() {
  const [socketUrl] = useState(process.env.NEXT_PUBLIC_WS_URL);
  const ListOfCity = useRef([]);
  const [ActiveCard, setActiveCard] = useState("");
  const {lastMessage, readyState } = useWebSocket(socketUrl, {
    shouldReconnect: () => true,
    reconnectAttempts: 10,
    reconnectInterval: 3000,
  });

  const MergeOldAndNewData = (old, New) => {
    const newMap = new Map();
    old.forEach((val, key) => newMap.set(key, val));
    New.forEach((val, key) => newMap.set(key, val));
    return newMap;
  };

  const CityData = (ArrayInput) => {
    const MapData = new Map();
    if (ArrayInput) {
      ArrayInput.forEach((val) => {
        MapData.set(val.city, val.aqi);
      });
    }
    return MapData;
  };

  ListOfCity.current = useMemo(() => {
    const { data } = lastMessage || { data: "" };
    const OutPutData = data && JSON.parse(data);
    const CityMappedData = CityData(OutPutData);
    const mergedMap = MergeOldAndNewData(ListOfCity.current, CityMappedData);
    return mergedMap;
  }, [lastMessage]);



  const connectionStatus = {
    [ReadyState.CONNECTING]: "Connecting",
    [ReadyState.OPEN]: "Open",
    [ReadyState.CLOSING]: "Closing",
    [ReadyState.CLOSED]: "Closed",
    [ReadyState.UNINSTANTIATED]: "Uninstantiated",
  }[readyState];

  const sortList = (data) =>
    Array.from(data).sort((a, b) => {
      if (a[0] < b[0]) {
        return -1;
      }
      if (a[0] > b[0]) {
        return 1;
      }
      return 0;
    });

    const scrollToTop = () => {
      window.scrollTo({
        top: 0,
        behavior: 'smooth' // for smoothly scrolling
      });
    };

  const MainBanner = {};
  MainBanner["width"] = "96%";
  MainBanner["order"] = "-1";
  //  MainBanner['margin']='0'

  const ShowCityList = (data) => {
    const sortedArray = sortList(data);
    return sortedArray.map((val, key) => (
      <div
        key={key}
        style={ActiveCard == val[0] ? MainBanner : null}
        className="cursor-pointer transition-all m-2 w-[95%] md:w-[23%] p-2 bg-[#ffffff] rounded "
      >
        <Card
          AQI={val[1]}
          CityName={val[0]}
          onClick={() => {setActiveCard(val[0]),scrollToTop()}}
        />
      </div>
    ));
  };

  return (
    <div className="bg-[#040714]">
      <Head>
        <title>Air Quality Monitoring</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className=" shadow-inner shadow-white">
        <div className="h-auto flex-wrap bg-black flex flex-col md:flex-row justify-center md:justify-between p-3">
          <h1 className="text-white flex justify-center text-xl font-bold">
            Air Quality Monitoring
          </h1>
          <div className=" md:w-[60%] flex items-center flex-wrap flex-row">
            <IndexWithColor />
          </div>
        </div>
        <div className="h-[62px] bg-black flex justify-center p-3">
          <h2 className="text-white font-bold ">
            Server Status: {connectionStatus}
          </h2>
        </div>
      </div>

      <div className="flex flex-col md:flex-row flex-wrap gap-1 mt-5 justify-center">
        {ShowCityList(ListOfCity.current)}
      </div>
      <footer className="h-[50px] text-white text-center mt-3 font-bold">
        Made by Rajeshwar Kashyap
      </footer>
    </div>
  );
}
