import Head from "next/head";
import React, { useState, useMemo,useRef, useEffect } from "react";
import useWebSocket, { ReadyState } from "react-use-websocket";
import IndexWithColor from "../components/indexwithcolor";
import dynamic from "next/dynamic";
import Card from "../constents/Card";
const Chart = dynamic(
  () => import('react-apexcharts'),
  { ssr: false }
)

export default function Home() {
  const [socketUrl, setSocketUrl] = useState("wss://city-ws.herokuapp.com/");
  const [messageHistory, setMessageHistory] = useState([]);
  const ListOfCity = useRef([]);
  const { sendMessage, lastMessage, readyState } = useWebSocket(socketUrl,{
    shouldReconnect: () => true,
    reconnectAttempts: 10,
    reconnectInterval: 3000,
  });


  const MergeOldAndNewData = (old,New) =>
  {
    const newMap = new Map();
    old.forEach((val, key) => newMap.set(key, val));
    New.forEach((val, key) => newMap.set(key, val));
    return newMap;
  } 


  const CityData =(ArrayInput) =>
  {
    const MapData = new Map();
    if (ArrayInput) {
    ArrayInput.forEach(val => {
      MapData.set(val.city, val.aqi);
    });
  }
    return MapData;
  }

  ListOfCity.current = useMemo(() => {
    const { data } = lastMessage || { data: '' };
    const OutPutData = (data && JSON.parse(data));
    const CityMappedData =CityData(OutPutData);
    console.log(ListOfCity)
    const mergedMap = MergeOldAndNewData(ListOfCity.current,CityMappedData);
    return mergedMap;
  }, [lastMessage]);

 
  

  useEffect(() => {
    if (lastMessage !== null) {
      setMessageHistory((prev) => prev.concat(lastMessage));
    }
  }, [lastMessage, setMessageHistory]);

  const connectionStatus = {
    [ReadyState.CONNECTING]: "Connecting",
    [ReadyState.OPEN]: "Open",
    [ReadyState.CLOSING]: "Closing",
    [ReadyState.CLOSED]: "Closed",
    [ReadyState.UNINSTANTIATED]: "Uninstantiated",
  }[readyState];


  const sortList = (data) => (Array.from(data)).sort((a, b) => {
    if (a[0] < b[0]) {
      return -1;
    }
    if (a[0] > b[0]) {
      return 1;
    }
    return 0;
  });

  const ReSizeCard=(CardID)=>
  {
    const allCards = document.querySelectorAll("[id^='CityBox']");
    allCards.forEach((val) => {
      document.getElementById(val.id).style.order = '0';
      document.getElementById(val.id).classList.remove('w-90');
    });
    document.getElementById(CardID).style.order = '-1';
    document.getElementById(CardID).classList.add('w-90');
    window.scrollTo({ top: 0 });
  }

  const showList = (data) => {
    const sortedArray = sortList(data);
    return sortedArray.map((val,key) => ( 
      <div key={key} className="cursor-pointer transition-all m-1 w-[98%] md:w-[23%] p-2 bg-slate-300 rounded shadow-indigo-500/40">
   <Card AQI={val[1]} id={`CityBox-${val[0]}`} CityName={val[0]} onClick={() => ReSizeCard(`CityBox-${val[0]}`)} />
      </div>
    ));
  };

  return (
    <div className="bg-white">
      <Head>
        <title>Air Quality Monitoring</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="h-auto flex-wrap bg-black flex flex-col md:flex-row justify-center md:justify-between p-3">
        <h1 className="text-white flex justify-center font-bold">Air Quality Monitoring</h1>
        <div className=" md:w-[60%] flex items-center flex-wrap flex-row">
            <IndexWithColor />
        </div>
      </div>
      <div className="h-[62px] bg-black flex justify-center p-3">
         <h2 className="text-white font-bold ">Server Status: {connectionStatus}</h2>
      </div>

      <div className="flex flex-col md:flex-row flex-wrap gap-1 mt-5 justify-center">
        {showList(ListOfCity.current)}
        </div>
    </div>
  );
}
